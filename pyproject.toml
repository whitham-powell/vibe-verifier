[build-system]
requires = ["setuptools>=65", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "vibe-verifier"
version = "0.1.0"
description = "Comprehensive code analysis, verification, and testing tool"
readme = "README.md"
requires-python = ">=3.8"
license = {text = "MIT"}
authors = [
    {name = "Vibe Verifier Team"},
]
keywords = ["verification", "testing", "analysis", "complexity", "security"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "Topic :: Software Development :: Quality Assurance",
    "Topic :: Software Development :: Testing",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Operating System :: OS Independent",
]
dependencies = [
    # Core dependencies for code analysis
    "radon>=5.1.0",           # Code complexity metrics
    "markdown>=3.4.0",        # Parse markdown documentation
    "beautifulsoup4>=4.12.0", # Parse HTML documentation
    "pyyaml>=6.0",           # Parse YAML configs
    "toml>=0.10.2",          # Parse TOML configs
    # Report generation
    "jinja2>=3.1.0",         # Template engine for reports
    "fpdf2>=2.7.0",          # PDF report generation
    # Static analysis tools for verification
    "pylint>=2.17.0",        # Python code linting
    "mypy>=1.5.0",           # Python type checking
    "bandit>=1.7.0",         # Security vulnerability scanning
    "safety>=2.3.0",         # Dependency vulnerability checking
    "flake8>=6.1.0",         # Python code quality checking
]

[project.urls]
Homepage = "https://github.com/vibes/vibe-verifier"
Documentation = "https://github.com/vibes/vibe-verifier/blob/main/README.md"
Repository = "https://github.com/vibes/vibe-verifier"
Issues = "https://github.com/vibes/vibe-verifier/issues"
Contributing = "https://github.com/vibes/vibe-verifier/blob/main/CONTRIBUTING.md"

[project.optional-dependencies]
dev = [
    # Testing vibe-verifier itself
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.11.0",
    "pytest-timeout>=2.1.0",
    "pytest-json-report>=1.5.0",
    "coverage>=7.3.0",
    "hypothesis>=6.82.0",
    # Code formatting for vibe-verifier development
    "black>=23.7.0",
    "isort>=5.12.0",
    # Development tools
    "ipython>=8.14.0",
    "ipdb>=0.13.13",
    "pre-commit>=3.3.3",
    # Build and release
    "build>=0.10.0",
    "twine>=4.0.2",
    # Type stubs for development
    "types-toml>=0.10.0",
    "types-PyYAML>=6.0.0",
    "types-Markdown>=3.0.0",
    "types-beautifulsoup4>=4.12.0",
    "types-fpdf2>=2.7.0",
]

[project.scripts]
vibe-verifier = "src.main:main"

[tool.setuptools.packages.find]
where = ["."]
include = ["src*"]

[tool.setuptools.package-data]
"*" = ["*.json", "*.yaml", "*.yml"]

[tool.black]
line-length = 100
target-version = ['py38', 'py39', 'py310', 'py311']
include = '\.pyi?$'
extend-exclude = '''
^/(
  (
      \.eggs
    | \.git
    | \.hg
    | \.mypy_cache
    | \.tox
    | \.venv
    | _build
    | buck-out
    | build
    | dist
  )/
)
'''

[tool.isort]
profile = "black"
line_length = 100
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = false
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

# Ignore missing imports only for packages without type stubs
[[tool.mypy.overrides]]
module = ["radon", "radon.*", "jinja2", "jinja2.*", "markdown", "markdown.*", "bs4", "bs4.*", "fpdf", "fpdf.*"]
ignore_missing_imports = true

# Less strict type checking for test files
[[tool.mypy.overrides]]
module = ["tests.*", "conftest"]
disallow_untyped_defs = false
disallow_incomplete_defs = false
check_untyped_defs = true

[tool.pytest.ini_options]
minversion = "6.0"
addopts = "-ra -q --strict-markers"
testpaths = [
    "tests",
]
python_files = "test_*.py"
python_classes = "Test*"
python_functions = "test_*"

[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__init__.py",
]

[tool.coverage.report]
precision = 2
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
]

[tool.pylint]
max-line-length = 100
disable = [
    "C0330",  # Wrong hanging indentation
    "C0326",  # No space allowed around keyword argument assignment
    "W0621",  # Redefining name from outer scope
    "R0913",  # Too many arguments
    "R0914",  # Too many local variables
    "R0915",  # Too many statements
]

[tool.flake8]
max-line-length = 100
extend-ignore = ["E203", "W503", "D202"]
# E203: whitespace before ':' (conflicts with black)
# W503: line break before binary operator (conflicts with black)
# D202: no blank lines after function docstring (conflicts with black)

[tool.bandit]
exclude_dirs = ["tests", "venv", ".venv"]
skips = ["B101"]  # Skip assert_used test
